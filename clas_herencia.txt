import kotlin.math.PI

fun main(){
    val squareCabin=SquareCabin(6,50.0)
    val roundhut=RoundHut(3,10.0)
    val roundtower=RoundTower(4,15.5)
    
    with(squareCabin){
        println("\nSquare Cabin\n============")
    	println("Capacity: ${squareCabin.capacity}")
    	println("Material: ${squareCabin.buildingMaterial}")
    	println("Has room? ${squareCabin.hasRoom()}")
        println("Floor area: ${floorArea()}")
    }
    
    with(roundhut){
        println("\nRound Hut\n=========")
        println("Material: ${buildingMaterial}")
        println("Capacity: ${capacity}")
        println("Has room? ${hasRoom()}")
    }
    
    with(roundtower){
        println("\nRound Hut\n=========")
        println("Material: ${buildingMaterial}")
        println("Capacity: ${capacity}")
        println("Has room? ${hasRoom()}")
    }
    
}
abstract class Dwelling(private var residents: Int){
    abstract val buildingMaterial: String
    abstract val capacity: Int
    
    fun hasRoom(): Boolean {
       return residents < capacity
   	}
    
    abstract fun floorArea(): Double
}

class SquareCabin(residents: Int, val length: Double): Dwelling(residents){
    override val buildingMaterial="Wood"
    override val capacity=6
    
    override fun floorArea(): Double {
		return length * length
	}
}

open class RoundHut(residents: Int): Dwelling(residents){
    override val buildingMaterial="Straw"
    override val capacity=4
    
    override fun floorArea(): Double {
    	return PI * radius * radius
	}
    
   fun calculateMaxCarpetSize(): Double {
       val diameter = 2 * radius
       return sqrt(diameter * diameter / 2)
   }
}

class RoundTower(residents: Int, val floors: Int=2): RoundHut(residents){
    override val buildingMaterial="Stone"
    override val capacity=4 * floors
    
   override fun floorArea(): Double {
       return super.floorArea() * floors
   }
}